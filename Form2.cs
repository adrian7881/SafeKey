using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace Password_Manager
{
    public partial class Form2 : Form
    {
        

        

        private void btnCreateAccount_Click(object sender, EventArgs e)
        {
            MyGlobals.txtAccountVar = txtAccountName.Text;
            MyGlobals.txtEmailVar = txtEmail.Text;
            MyGlobals.txtPassowrdVar = txtPassword.Text;
            MyGlobals.txtUsernameVar = txtUsername.Text;


            SafeKeyMain2 accountmanager = new SafeKeyMain2();
            this.Hide();
            /*accountmanager.ShowDialog();*/
            SafeKeyMain2.WindowState = FormWindowState.Minimized;
        }

        public Form2()
        {
            InitializeComponent();
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            SafeKeyMain2 accountmanager = new SafeKeyMain2();
            this.Hide();
            accountmanager.ShowDialog();
        }

        private void btnPasteInfo_Click(object sender, EventArgs e)
        {
            if (Clipboard.GetDataObject().GetDataPresent(DataFormats.Text) == true)
            {
                if (txtInfo.SelectionLength > 0)
                {
                    if (MessageBox.Show("Do you want to paste over current selection?", "Cut Example", MessageBoxButtons.YesNo) == DialogResult.No)
                        txtInfo.SelectionStart = txtInfo.SelectionStart + txtInfo.SelectionLength;
                }
                txtInfo.Paste();
            }
        }

        private void btnClearInfo_Click(object sender, EventArgs e)
        {
            txtInfo.Text = String.Empty;

        }

        private void btnPastePassword_Click(object sender, EventArgs e)
        {
            txtPassword.Text = GenerateToken(9);
            btnShow.BringToFront();
        }

        // Method for generating a random token string
        public string GenerateToken(int length)
        { 
            using (RNGCryptoServiceProvider cryptRNG = new RNGCryptoServiceProvider())      // Use a "using" statement to create a new instance of the RNGCryptoServiceProvider class
            {
                byte[] tokenBuffer = new byte[length];      // Create a new byte array with a specified length
                cryptRNG.GetBytes(tokenBuffer);     // Fill the byte array with random bytes generated by the RNGCryptoServiceProvider
                return Convert.ToBase64String(tokenBuffer);     // Convert the byte array to a base64 encoded string and return it as the result
            }
        }

        private void btnShow_Click(object sender, EventArgs e)
        {
            if (txtPassword.PasswordChar == (char)0x25cf)
            {
                btnShow.BackgroundImage = Properties.Resources.Untitled__1_;
                txtPassword.PasswordChar = '\0';
            }
            else
            {
                btnShow.BackgroundImage = Properties.Resources.show_final;
                txtPassword.PasswordChar = (char)0x25cf;
            }
        }

        private void btnClearUsername_Click(object sender, EventArgs e)
        {
            txtUsername.Text = String.Empty;

        }

        private void btnClearEmail_Click(object sender, EventArgs e)
        {
            txtEmail.Text = String.Empty;

        }

        private void btnClearAccountName_Click(object sender, EventArgs e)
        {
            txtAccountName.Text = String.Empty;

        }

        private void btnPasteUsername_Click(object sender, EventArgs e)
        {
            if (Clipboard.GetDataObject().GetDataPresent(DataFormats.Text) == true)
            {
                if (txtUsername.SelectionLength > 0)
                {
                    if (MessageBox.Show("Do you want to paste over current selection?", "Cut Example", MessageBoxButtons.YesNo) == DialogResult.No)
                        txtUsername.SelectionStart = txtUsername.SelectionStart + txtUsername.SelectionLength;
                }
                txtUsername.Paste();
            }
        }

        private void btnPasteEmail_Click(object sender, EventArgs e)
        {
            if (Clipboard.GetDataObject().GetDataPresent(DataFormats.Text) == true)
            {
                if (txtEmail.SelectionLength > 0)
                {
                    if (MessageBox.Show("Do you want to paste over current selection?", "Cut Example", MessageBoxButtons.YesNo) == DialogResult.No)
                        txtEmail.SelectionStart = txtEmail.SelectionStart + txtEmail.SelectionLength;
                }
                txtEmail.Paste();
            }
        }

        private void BtnPasteAccountName_Click(object sender, EventArgs e)
        {
            if (Clipboard.GetDataObject().GetDataPresent(DataFormats.Text) == true)
            {
                if (txtAccountName.SelectionLength > 0)
                {
                    if (MessageBox.Show("Do you want to paste over current selection?", "Cut Example", MessageBoxButtons.YesNo) == DialogResult.No)
                        txtAccountName.SelectionStart = txtAccountName.SelectionStart + txtAccountName.SelectionLength;
                }
                txtAccountName.Paste();
            }
        }

        private void txtPassword_TextChanged(object sender, EventArgs e)
        {
            txtPassword.PasswordChar = (char)0x25cf;

            var textboxes = new[] { txtEmail, txtAccountName, txtPassword };
            if (textboxes.Any(x => string.IsNullOrWhiteSpace(x.Text)) == true)
            {

                btnCreateAccount.Enabled = false;
            }
            else
            {
                btnCreateAccount.Enabled = true;
            }
        }

        private void txtUsername_TextChanged(object sender, EventArgs e)
        {
            var textboxes = new[] { txtEmail, txtAccountName, txtPassword };
            if (textboxes.Any(x => string.IsNullOrWhiteSpace(x.Text)) == true)
            {

                btnCreateAccount.Enabled = false;
            }
            else
            {
                btnCreateAccount.Enabled = true;
            }
        }

        private void txtAccountName_TextChanged(object sender, EventArgs e)
        {
            var textboxes = new[] { txtEmail, txtAccountName, txtPassword };
            if (textboxes.Any(x => string.IsNullOrWhiteSpace(x.Text)) == true)
            {

                btnCreateAccount.Enabled = false;
            }
            else
            {
                btnCreateAccount.Enabled = true;
            }
        }

        private void txtEmail_TextChanged(object sender, EventArgs e)
        {
            var textboxes = new[] { txtEmail, txtAccountName, txtPassword };
            if (textboxes.Any(x => string.IsNullOrWhiteSpace(x.Text)) == true)
            {

                btnCreateAccount.Enabled = false;
            }
            else
            {
                btnCreateAccount.Enabled = true;
            }
        }

        private void Form2_Load(object sender, EventArgs e)
        {

        }


        

    }
    public static class MyGlobals
    {
        public static string txtAccountVar = "";
        public static string txtEmailVar = "";
        public static string txtPassowrdVar = "";
        public static string txtUsernameVar = "";
    }
}
